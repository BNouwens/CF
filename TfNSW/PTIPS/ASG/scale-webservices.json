{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Sample Template: Create a multi-az.",
    "Parameters": {
        "InstanceType": {
            "Description": "WebServer EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "g2.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "OperatorEMail": {
            "Description": "EMail address to notify if there are any scaling operations",
            "Type": "String",
            "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
            "ConstraintDescription": "must be a valid email address."
        },
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "SecurityGroupIds": {
            "Description": "Security Group IDs for Server",
            "Default": "",
            "Type": "List<AWS::EC2::SecurityGroup::Id>"
        },
        "AMI": {
            "Description": "AMI ID for Server",
            "Default": "ami-32312751",
            "Type": "String"
        },
        "Subnet": {
            "Description": "Select a private subnet for the instance",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "LBSubnet": {
            "Description": "Select a private subnet for the Load Balancer",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "Environment": {
            "Description": "Environment Code",
            "Default": "ppd",
            "Type": "String"
        },
        "Solution": {
            "Description": "Solution Code",
            "Default": "ppd",
            "Type": "String"
        },
        "CostCentre": {
            "Description": "Cost Code",
            "Default": "template",
            "Type": "String"
        },
        "NameCode": {
            "Description": "Server Name code",
            "Default": "ap01",
            "Type": "String"
        },
        "CertificateArn": {
            "Description": "Arn of ACM Certificate",
            "Type": "String"
        },
        "iamProfile": {
            "Description": "IAM Profile to associate with instance",
            "Default": "",
            "Type": "String"
        }
    },
    "Resources": {
        "NotificationTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "OperatorEMail"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "Subnet"
                },
                "HealthCheckType": "EC2",
                "HealthCheckGracePeriod": "120",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "Solution"
                                    },
                                    {
                                        "Ref": "Environment"
                                    },
                                    {
                                        "Ref": "NameCode"
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "CostCentre",
                        "Value": {
                            "Ref": "CostCentre"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Solution",
                        "Value": {
                            "Ref": "Solution"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "os",
                        "Value": "linux",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "type",
                        "Value": "webservices",
                        "PropagateAtLaunch": "true"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "MinSize": "0",
                "MaxSize": "0",
                "TargetGroupARNs": [
                    {
                        "Ref": "webServicesLbTG"
                    }
                ]
            },
            "CreationPolicy": {
                "AutoScalingCreationPolicy": {
                    "MinSuccessfulInstancesPercent": "0"
                },
                "ResourceSignal": {
                    "Timeout": "PT3M",
                    "Count": "0"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "0",
                    "MaxBatchSize": "1",
                    "PauseTime": "PT3M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment": "Bootstrap installation of PTIPS Web Services",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "Install": [
                            "Install"
                        ]
                    },
                    "Install": {
                        "packages": {
                            "rpm": {
                                "ssm": "https://s3-ap-southeast-2.amazonaws.com/amazon-ssm-ap-southeast-2/latest/linux_amd64/amazon-ssm-agent.rpm"
                            },
                            "yum": {
                                "ansible": []
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "amazon-ssm-agent": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "AMI"
                },
                "SecurityGroups": {
                    "Ref": "SecurityGroupIds"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "InstanceMonitoring": "false",
                "IamInstanceProfile": {
                    "Ref": "iamProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\n",
                                "yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm\n",
                                "yum -y install python-pip\n",
                                "cd /usr/bin\n",
                                "pip install --upgrade pip",
                                "pip install pystache\n",
                                "pip install argparse\n",
                                "pip install python-daemon\n",
                                "pip install requests\n",
                                "cd /opt\n",
                                "Curl –O  https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-4.noarch.rpm\n",
                                "rpm –Uvh aws*.rpm\n",
                                "curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "tar -xvpf aws-cfn-bootstrap-latest.tar.gz\n",
                                "cd aws-cfn-bootstrap-1.4/\n",
                                "python setup.py build\n",
                                "python setup.py install\n",
                                "ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup\n",
                                "chmod 775 /usr/init/redhat/cfn-hup\n",
                                "cd /opt\n",
                                "mkdir aws\n",
                                "cd aws\n",
                                "mkdir bin\n",
                                "ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup\n",
                                "ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init\n",
                                "ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal\n",
                                "ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader\n",
                                "ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata\n",
                                "ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event\n",
                                "ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result\n",
                                "pip install awscli --upgrade\n",
                                "export PATH=~/.local/bin:$PATH\n",
                                "source ~/.bash_profile\n",
                                "chmod u+x /usr/bin/aws\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig ",
                                "         --configsets Install ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "90",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "70",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "webServicesLb": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "Subnets": [
                    {
                        "Fn::ImportValue": "ControlledASubnet-9"
                    },
                    {
                        "Fn::ImportValue": "ControlledBSubnet-9"
                    },
                    {
                        "Fn::ImportValue": "ControlledCSubnet-9"
                    }
                ],
                "LoadBalancerAttributes": [
                    {
                        "Key": "idle_timeout.timeout_seconds",
                        "Value": "60"
                    }
                ],
                "SecurityGroups": {
                    "Ref": "SecurityGroupIds"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "ptips",
                                    {
                                        "Ref": "Environment"
                                    },
                                    "weblb"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "webServicesLbListener443": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "webServicesLbTG"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "webServicesLb"
                },
                "Port": "443",
                "Protocol": "HTTPS",
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "CertificateArn"
                        }
                    }
                ]
            }
        },
        "webServicesLbTG": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPort": 80,
                "HealthCheckPath": "/",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 5,
                "Matcher": {
                    "HttpCode": "200"
                },
                "Port": 80,
                "Protocol": "HTTP",
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": "20"
                    },
                    {
                        "Key": "stickiness.enabled",
                        "Value": "true"
                    },
                    {
                        "Key": "stickiness.lb_cookie.duration_seconds",
                        "Value": 86400
                    }
                ],
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Fn::ImportValue": "VPC-9"
                }
            }
        }
    }
}